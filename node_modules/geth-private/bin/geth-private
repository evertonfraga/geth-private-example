#!/usr/bin/env node

"use strict";


const yargs = require('yargs'),
  chalk = require('chalk');

const geth = require('..');

const packageJson = require('../package.json');


// CLI options
const argv = yargs
    .usage('Usage: $0 [options]')
    .describe('balance', 'Auto-mine until this initial Ether balance is achieved (default: 0)')
    .describe('autoMine', 'Auto-mine indefinitely (overrides --balance option)')
    .describe('gethPath', 'Path to geth executable to use instead of default')
    .describe('genesisBlock', 'Genesis block overrides as a JSON string')
    .help('h')
    .alias('h', 'help')
    .boolean('v', 'Verbose logging')
    .describe('version', 'Output version.')
    .epilogue('All other options get passed onto the geth executable.')
    .parse(process.argv.slice(1));

if (argv.version) {
  return console.log(`geth-private ${packageJson.version}`);
}

var gethOptions = {};

var nonGethOptionKeys = [
  '_', '$0', 'v', 'h', 'help', 'version', 'gethPath', 'genesisBlock', 'balance', 'autoMine'
]

for (let key in argv) {
  if (0 > nonGethOptionKeys.indexOf(key)) {
    gethOptions[key] = argv[key];
  }
}


var inst = geth({
  verbose: !!argv.v,
  balance: argv.balance,
  autoMine: !!argv.autoMine,
  gethPath: argv.gethPath || null,
  genesisBlock: JSON.parse(argv.genesisBlock || 'null'),
  gethOptions: gethOptions
})

inst.start()
  .then(function() {
    console.log(chalk.yellow(`Geth is now running (pid: ${inst.pid}).\n`));
    console.log(chalk.yellow(`Etherbase:\t${inst.account}`));
    console.log(chalk.yellow(`Data folder:\t${inst.dataDir}`));
    console.log(chalk.yellow(`\nTo access:\tgeth attach ipc://${inst.dataDir}/geth.ipc`));
  })
  .catch(function(err) {
    console.error(err);
  });

